# SPDX-FileCopyrightText: 2022-2025 TII (SSRC) and the Ghaf contributors
#
# SPDX-License-Identifier: Apache-2.0

name: check

permissions:
  contents: read

on:
  push:
    branches:
      - main
  pull_request_target:
    branches:
      - main
jobs:
  authorize:
    # Important: 'authorize' must run before checkout to ensure 'authorize.yml'
    # runs the base version, not the untrusted version from the PR.
    uses: ./.github/workflows/authorize.yml
    # Skip running in forked repositories, since the workflow run would fail
    # due to missing repository secret(s):
    if: ${{ github.repository == 'tiiuae/ghaf-fmo-laptop' }}
    with:
      github-org: tiiuae
    secrets:
      read-org-members: ${{ secrets.READ_ORG_MEMBERS }}
  run-checks:
    needs: [authorize]
    if: needs.authorize.outputs.result == 'authorized'
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit
      - uses: webfactory/ssh-agent@a6f90b1f127823b31d4d4a8d96047790581349bd # v0.9.1
        with:
          ssh-private-key: |
            ${{ secrets.READ_PRIVATE_REPO }}
            ${{ secrets.BUILDER_SSH_KEY }}
            ${{ secrets.DEVICE_ASSEMBLY_TOOLSET }}
            ${{ secrets.ENROLL_MC }}
            ${{ secrets.KMS_CLIENT }}
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          fetch-depth: 0
          persist-credentials: false
      - name: Rebase
        if: ${{ github.base_ref != '' }}
        run: |
          BASE="origin/${BASE_REF}"
          COMMITS="$(git rev-list "$BASE".. --count)"
          CONTEXT=5
          echo -e "\n[+] Git log before rebase (with $CONTEXT commits context):"
          git log --oneline -n$(( COMMITS + CONTEXT ))
          echo -e "\n[+] Rebasing $COMMITS commit(s) on top of '$BASE'"
          git config user.email "foo@bar.com"; git config user.name "Foo Bar"
          git rebase "$BASE"
          echo -e "\n[+] Git log after rebase (with $CONTEXT commits context):"
          git log --oneline -n$(( COMMITS + CONTEXT ))
        env:
          BASE_REF: ${{ github.base_ref }}
      - name: Install nix
        uses: cachix/install-nix-action@7ab6e7fd29da88e74b1e314a4ae9ac6b5cda3801 # v31
      - name: Generate token
        id: auth
        uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: tiiuae
      - name: Prepare remote builds
        run: |
          sudo sh -c "echo '${BUILDER_SSH_KNOWN_HOST}' >>/etc/ssh/ssh_known_hosts"
        env:
          BUILDER_SSH_KNOWN_HOST: ${{ vars.BUILDER_SSH_KNOWN_HOST }}
      - name: Run all checks
        run: |
          # Setup the .netrc file on remote builder: it will be used to access
          # the go dependencies in private repositories
          tmpdir="$(mktemp --tmpdir=/tmp --dry-run --directory --suffix .gha-check)"
          echo "machine github.com login x-access-token password ${APP_TOKEN}" |\
            ssh "${BUILDER_X86}" "mkdir -p $tmpdir; cat > $tmpdir/.netrc"
          on_exit () {
            echo "Removing $tmpdir on ${BUILDER_X86}"
            ssh "${BUILDER_X86}" "rm -fr $tmpdir"
          }
          trap on_exit EXIT

          # Run the checks on remote builder
          nix run --inputs-from .# nixpkgs#nix-fast-build -- \
            --remote "${BUILDER_X86}" \
            --flake '.#checks' \
            --always-upload-source \
            --option accept-flake-config true \
            --option extra-sandbox-paths "/tmp/.netrc=$tmpdir/.netrc" \
            --no-download --skip-cached --no-nom
        env:
          BUILDER_X86: ${{ vars.BUILDER_X86 }}
          APP_TOKEN: ${{ steps.auth.outputs.token }}
