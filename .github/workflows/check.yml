# SPDX-FileCopyrightText: 2022-2025 TII (SSRC) and the Ghaf contributors
#
# SPDX-License-Identifier: Apache-2.0

name: check

permissions:
  contents: read

on:
  push:
    branches:
      - main
  pull_request_target:
    branches:
      - main
jobs:
  check-identity:
    # Skip running in forked repos, since it would fail anyway:
    if: ${{ github.repository == 'tiiuae/ghaf-fmo-laptop' }}
    runs-on: ubuntu-latest
    outputs:
      authorized_user: ${{ steps.check-authorized-user.outputs.authorized_user }}
    environment: "internal"
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@c6295a65d1254861815972266d5933fd6e532bdf # v2.11.1
        with:
          egress-policy: audit

      - name: Check identity
        id: check-authorized-user
        shell: bash
        run: |
          authorized_user='False'
          for user in ${{ vars.AUTHORIZED_USERS }};
          do
            if [ "$user" = "${{ github.actor }}" ]; then
              authorized_user='True'
              break
            fi
          done
          echo "github.event_name: ${{ github.event_name }}"
          echo "github.repository: ${{ github.repository }}"
          echo "github.event.pull_request.head.repo.full_name: ${{ github.event.pull_request.head.repo.full_name }}"
          echo "github.actor: ${{ github.actor }}"
          echo "github.ref: ${{ github.ref }}"
          echo "github.event.pull_request.head.sha: ${{github.event.pull_request.head.sha }}"
          echo "authorized_user=$authorized_user"
          echo "authorized_user=$authorized_user" >> "$GITHUB_OUTPUT"

  # Authorization passes without approval if:
  # - The event is not a pull request (e.g. push to main)
  # - Pull request comes from another branch in the same repo
  # - Author is in our predefined list of authorized users
  # Otherwise, the workflow requires manual approval from a maintainer
  # as configured in the 'external' github environment
  authorize:
    needs: [check-identity]
    environment: ${{
      ( github.event_name != 'pull_request_target' ||
        github.event.pull_request.head.repo.full_name == github.repository ||
        needs.check-identity.outputs.authorized_user == 'True' )
      && 'internal' || 'external' }}
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@c6295a65d1254861815972266d5933fd6e532bdf # v2.11.1
        with:
          egress-policy: audit

      - run: echo "Auth OK"

  # Send a warning and fail this job if the workflow file was changed.
  # Rest of the workflow continues as normal but the job failure will grab author's attention.
  no-workflow-changes:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request_target' }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@c6295a65d1254861815972266d5933fd6e532bdf # v2.11.1
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          fetch-depth: 0

      - name: Check if workflow is modified
        id: workflow-changed
        uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46.0.5
        with:
          files: .github/workflows/check.yml

      - name: Send warning
        run: |
          if [ "${{ steps.workflow-changed.outputs.any_changed }}" == "true" ]; then
            echo "::error::"\
                 "This change edits workflow file '.github/workflows/check.yml'."\
                 "Raising this error to notify that the workflow change will only take impact after merge."\
                 "Therefore, you need to manually test the change (perhaps in a forked repo) "\
                 "before merging to make sure the change does not break anything."

            exit 1
          fi

  run-checks:
    needs: [authorize]
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@c6295a65d1254861815972266d5933fd6e532bdf # v2.11.1
        with:
          egress-policy: audit

      - uses: webfactory/ssh-agent@a6f90b1f127823b31d4d4a8d96047790581349bd # v0.9.1
        with:
          ssh-private-key: |
            ${{ secrets.READ_PRIVATE_REPO }}
            ${{ secrets.BUILDER_SSH_KEY }}
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          fetch-depth: 0
      - name: Rebase
        if: ${{ github.base_ref != '' }}
        run: |
          sudo apt-get update; sudo apt-get install -y git
          BASE="origin/${{ github.base_ref }}"
          COMMITS="$(git rev-list "$BASE".. --count)"
          CONTEXT=5
          echo -e "\n[+] Git log before rebase (with $CONTEXT commits context):"
          git log --oneline -n$(( COMMITS + CONTEXT ))
          echo -e "\n[+] Rebasing $COMMITS commit(s) on top of '$BASE'"
          git config user.email "foo@bar.com"; git config user.name "Foo Bar"
          git rebase "$BASE"
          echo -e "\n[+] Git log after rebase (with $CONTEXT commits context):"
          git log --oneline -n$(( COMMITS + CONTEXT ))
      - name: Install nix
        uses: cachix/install-nix-action@754537aaedb35f72ab11a60cc162c49ef3016495 # v31
      - name: Generate token
        id: auth
        uses: actions/create-github-app-token@3ff1caaa28b64c9cc276ce0a02e2ff584f3900c5 # v2.0.2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: tiiuae
      - name: Prepare remote builds
        run: |
          sudo sh -c "echo '${{ vars.BUILDER_SSH_KNOWN_HOST }}' >>/etc/ssh/ssh_known_hosts"
      - name: Run all checks
        run: |
          # Setup the .netrc file on remote builder: it will be used to access
          # the go dependencies in private repositories
          tmpdir="$(mktemp --tmpdir=/tmp --dry-run --directory --suffix .gha-check)"
          echo 'machine github.com login x-access-token password ${{ steps.auth.outputs.token }}' |\
            ssh "${{ vars.BUILDER_X86 }}" "mkdir -p $tmpdir; cat > $tmpdir/.netrc"
          on_exit () {
            echo "Removing $tmpdir on ${{ vars.BUILDER_X86 }}"
            ssh "${{ vars.BUILDER_X86 }}" "rm -fr $tmpdir"
          }
          trap on_exit EXIT

          # Run the checks on remote builder
          nix run --inputs-from .# nixpkgs#nix-fast-build -- \
            --remote '${{ vars.BUILDER_X86 }}' \
            --flake '.#checks' \
            --always-upload-source \
            --option accept-flake-config true \
            --option extra-sandbox-paths "/tmp/.netrc=$tmpdir/.netrc" \
            --no-download --skip-cached --no-nom
