# SPDX-FileCopyrightText: 2022-2025 TII (SSRC) and the Ghaf contributors
#
# SPDX-License-Identifier: Apache-2.0

name: check

permissions:
  contents: read

on:
  push:
    branches:
      - main
  pull_request_target:
    branches:
      - main
jobs:
  authorize:
    # Important: 'authorize' must run before checkout to ensure 'authorize.yml'
    # runs the base version, not the untrusted version from the PR.
    uses: ./.github/workflows/authorize.yml
    # Skip running in forked repositories, since the workflow run would fail
    # due to missing repository secret(s):
    if: ${{ github.repository == 'tiiuae/ghaf-fmo-laptop' }}
    with:
      github-org: tiiuae
    secrets:
      read-org-members: ${{ secrets.READ_ORG_MEMBERS }}
  run-checks:
    needs: [authorize]
    if: needs.authorize.outputs.result == 'authorized'
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit
      - uses: webfactory/ssh-agent@a6f90b1f127823b31d4d4a8d96047790581349bd # v0.9.1
        with:
          ssh-private-key: |
            ${{ secrets.READ_PRIVATE_REPO }}
            ${{ secrets.BUILDER_SSH_KEY }}
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          fetch-depth: 0
      - name: Rebase
        if: ${{ github.base_ref != '' }}
        run: |
          sudo apt-get update; sudo apt-get install -y git
          BASE="origin/${{ github.base_ref }}"
          COMMITS="$(git rev-list "$BASE".. --count)"
          CONTEXT=5
          echo -e "\n[+] Git log before rebase (with $CONTEXT commits context):"
          git log --oneline -n$(( COMMITS + CONTEXT ))
          echo -e "\n[+] Rebasing $COMMITS commit(s) on top of '$BASE'"
          git config user.email "foo@bar.com"; git config user.name "Foo Bar"
          git rebase "$BASE"
          echo -e "\n[+] Git log after rebase (with $CONTEXT commits context):"
          git log --oneline -n$(( COMMITS + CONTEXT ))
      - name: Install nix
        uses: cachix/install-nix-action@754537aaedb35f72ab11a60cc162c49ef3016495 # v31
      - name: Generate token
        id: auth
        uses: actions/create-github-app-token@3ff1caaa28b64c9cc276ce0a02e2ff584f3900c5 # v2.0.2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: tiiuae
      - name: Prepare remote builds
        run: |
          sudo sh -c "echo '${{ vars.BUILDER_SSH_KNOWN_HOST }}' >>/etc/ssh/ssh_known_hosts"
      - name: Run all checks
        run: |
          # Setup the .netrc file on remote builder: it will be used to access
          # the go dependencies in private repositories
          tmpdir="$(mktemp --tmpdir=/tmp --dry-run --directory --suffix .gha-check)"
          echo 'machine github.com login x-access-token password ${{ steps.auth.outputs.token }}' |\
            ssh "${{ vars.BUILDER_X86 }}" "mkdir -p $tmpdir; cat > $tmpdir/.netrc"
          on_exit () {
            echo "Removing $tmpdir on ${{ vars.BUILDER_X86 }}"
            ssh "${{ vars.BUILDER_X86 }}" "rm -fr $tmpdir"
          }
          trap on_exit EXIT

          # Run the checks on remote builder
          nix run --inputs-from .# nixpkgs#nix-fast-build -- \
            --remote '${{ vars.BUILDER_X86 }}' \
            --flake '.#checks' \
            --always-upload-source \
            --option accept-flake-config true \
            --option extra-sandbox-paths "/tmp/.netrc=$tmpdir/.netrc" \
            --no-download --skip-cached --no-nom
